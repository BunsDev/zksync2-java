package io.zksync.wrappers;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class L1ERC20Bridge extends Contract {
    public static final String BINARY = "0x60a060405234801561001057600080fd5b506040516200190b3803806200190b833981016040819052610031916100ac565b61003961004a565b6001600160a01b03166080526100dc565b7f8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf48054600190915580156100a95760405162461bcd60e51b815260206004820152600260248201526118a160f11b604482015260640160405180910390fd5b50565b6000602082840312156100be57600080fd5b81516001600160a01b03811681146100d557600080fd5b9392505050565b6080516117fe6200010d6000396000818161030e015281816104590152818161066e01526107fe01526117fe6000f3fe6080604052600436106100865760003560e01c806393d2227e1161005957806393d2227e1461013b578063ae1f6aaf1461015b578063eddd5e8214610193578063f5f15168146101b3578063f76be088146101d357600080fd5b80631cdff2001461008b5780634bed8212146100ad5780638340f549146100fa5780639181e55d1461011b575b600080fd5b34801561009757600080fd5b506100ab6100a6366004611136565b6101e9565b005b3480156100b957600080fd5b506100e56100c8366004611260565b600060208181529281526040808220909352908152205460ff1681565b60405190151581526020015b60405180910390f35b61010d610108366004611282565b6103c0565b6040519081526020016100f1565b34801561012757600080fd5b506100ab61013636600461130a565b61057f565b34801561014757600080fd5b506100ab6101563660046113bb565b610792565b34801561016757600080fd5b5060025461017b906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b34801561019f57600080fd5b5060035461017b906001600160a01b031681565b3480156101bf57600080fd5b5061017b6101ce36600461143d565b61093f565b3480156101df57600080fd5b5061010d60045481565b6101f16109ae565b81516002146101ff57600080fd5b610222826001815181106102155761021561145f565b60200260200101516109fa565b6004819055600380546001600160a01b0319166001600160a01b0384161790556040805130602082015290810191909152600090819060600160405160208183030381529060405290506000610284856000815181106102155761021561145f565b90506000631415dae260e01b84836000866040516024016102a894939291906114d1565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506102f03085848680519060200120610aaa565b600280546001600160a01b0319166001600160a01b039283161790557f00000000000000000000000000000000000000000000000000000000000000001663cfeddec7610340618000600661150f565b83622000008a6040518563ffffffff1660e01b8152600401610365949392919061153a565b602060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b791906115c5565b50505050505050565b6000805160206117a983398151915254600090600181146103e057600080fd5b60026000805160206117a98339815191525560006103ff338686610b1a565b90506000811161043b5760405162461bcd60e51b81526020600482015260026024820152610c5560f21b60448201526064015b60405180910390fd5b600061044933888885610c92565b6002549091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163cfeddec791349116846220000060006040519080825280602002602001820160405280156104be57816020015b60608152602001906001900390816104a95790505b506040518663ffffffff1660e01b81526004016104de949392919061153a565b6020604051808303818588803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061053091906115c5565b3360009081526001602081815260408084206001600160a01b039b909b168452998152898320848452905297902092909255506000805160206117a98339815191529490945550919392505050565b6000805160206117a9833981519152546001811461059c57600080fd5b60026000805160206117a98339815191525560008781526020818152604080832089845290915290205460ff16156105fb5760405162461bcd60e51b8152602060048201526002602482015261707760f01b6044820152606401610432565b6040805180820182526002546001600160a01b0316815281516020601f8801819004810282018101909352868152600092808301919089908990819084018382808284376000920182905250939094525050602083015192935091829150819061066490610cfe565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630f2b290e8d8d888c8c6040518663ffffffff1660e01b81526004016106c0959493929190611614565b60206040518083038186803b1580156106d857600080fd5b505afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610710919061166f565b9050806107445760405162461bcd60e51b81526020600482015260026024820152616e7160f01b6044820152606401610432565b60008c8152602081815260408083208e84529091529020805460ff19166001179055610771848484610da7565b50505050505060016000805160206117a98339815191525550505050505050565b6000805160206117a983398151915254600181146107af57600080fd5b60026000805160206117a9833981519152556000604051806060016040528061800060016107dd919061150f565b6001600160a01b031681526020018881526020016000801b815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f50ceca988888589896040518663ffffffff1660e01b8152600401610850959493929190611691565b60206040518083038186803b15801561086857600080fd5b505afa15801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a0919061166f565b9050806108ac57600080fd5b6001600160a01b03808b166000908152600160209081526040808320938d1683529281528282208b835290522054806108e457600080fd5b6001600160a01b03808c166000908152600160209081526040808320938e1683529281528282208c835290529081205561091f8b8b83610da7565b5050505060016000805160206117a9833981519152555050505050505050565b600354604080516001600160a01b0390921660208301528181015260006060820181905290819060800160408051601f1981840301815291905280516020909101206002546004549192506001600160a01b03808616926109a69290911690839085610aaa565b949350505050565b6000805160206117a98339815191528054600190915580156109f75760405162461bcd60e51b815260206004820152600260248201526118a160f11b6044820152606401610432565b50565b60008060208351610a0b91906116df565b9050620100008110610a445760405162461bcd60e51b8152602060048201526002602482015261070760f41b6044820152606401610432565b600283604051610a549190611701565b602060405180830381855afa158015610a71573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190610a9491906115c5565b6001600160f01b031660f09190911b1792915050565b604080517f2020dba91b30cc0006188af794c2fb30dd8520db7e2c088b7fc7c103c00ca4946020808301919091526001600160a01b0396909616818301526060810194909452608084019290925260a0808401919091528151808403909101815260c09092019052805191012090565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b158015610b5e57600080fd5b505afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9691906115c5565b6040516323b872dd60e01b81526001600160a01b03878116600483015230602483015260448201869052919250908516906323b872dd90606401600060405180830381600087803b158015610bea57600080fd5b505af1158015610bfe573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03871691506370a082319060240160206040518083038186803b158015610c4457600080fd5b505afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7c91906115c5565b9050610c88828261171d565b9695505050505050565b60606000610c9f84610f0f565b905063cfe7af7c60e01b8686868685604051602401610cc2959493929190611734565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529695505050505050565b60008060008351604c14610d395760405162461bcd60e51b81526020600482015260026024820152616b6b60f01b6044820152606401610432565b60048481015190639181e55d60e01b6001600160e01b031960e084901b1614610d895760405162461bcd60e51b81526020600482015260026024820152611b9d60f21b6044820152606401610432565b60149501948501516028860151604890960151909690945092505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b158015610deb57600080fd5b505afa158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2391906115c5565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018690529192509085169063a9059cbb90604401600060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03871691506370a082319060240160206040518083038186803b158015610ecb57600080fd5b505afa158015610edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0391906115c5565b9050610c88818361171d565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b17905290516060916000916001600160a01b03851691610f5391611701565b600060405180830381855afa9150503d8060008114610f8e576040519150601f19603f3d011682016040523d82523d6000602084013e610f93565b606091505b5060408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b1790529051919350600092506001600160a01b03861691610fda9190611701565b600060405180830381855afa9150503d8060008114611015576040519150601f19603f3d011682016040523d82523d6000602084013e61101a565b606091505b5060408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051919350600092506001600160a01b038716916110619190611701565b600060405180830381855afa9150503d806000811461109c576040519150601f19603f3d011682016040523d82523d6000602084013e6110a1565b606091505b509150508282826040516020016110ba9392919061176f565b6040516020818303038152906040529350505050919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611112576111126110d3565b604052919050565b80356001600160a01b038116811461113157600080fd5b919050565b600080604080848603121561114a57600080fd5b833567ffffffffffffffff8082111561116257600080fd5b8186019150601f878184011261117757600080fd5b823560208382111561118b5761118b6110d3565b8160051b61119a8282016110e9565b928352858101820192828101908c8511156111b457600080fd5b83880192505b84831015611241578235878111156111d25760008081fd5b8801603f81018e136111e45760008081fd5b84810135888111156111f8576111f86110d3565b611209818901601f191687016110e9565b8181528f8c83850101111561121e5760008081fd5b818c840188830137600091810187019190915283525091830191908301906111ba565b995061125191505089820161111a565b96505050505050509250929050565b6000806040838503121561127357600080fd5b50508035926020909101359150565b60008060006060848603121561129757600080fd5b6112a08461111a565b92506112ae6020850161111a565b9150604084013590509250925092565b60008083601f8401126112d057600080fd5b50813567ffffffffffffffff8111156112e857600080fd5b6020830191508360208260051b850101111561130357600080fd5b9250929050565b6000806000806000806080878903121561132357600080fd5b8635955060208701359450604087013567ffffffffffffffff8082111561134957600080fd5b818901915089601f83011261135d57600080fd5b81358181111561136c57600080fd5b8a602082850101111561137e57600080fd5b60208301965080955050606089013591508082111561139c57600080fd5b506113a989828a016112be565b979a9699509497509295939492505050565b600080600080600080600060c0888a0312156113d657600080fd5b6113df8861111a565b96506113ed6020890161111a565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff81111561141e57600080fd5b61142a8a828b016112be565b989b979a50959850939692959293505050565b60006020828403121561144f57600080fd5b6114588261111a565b9392505050565b634e487b7160e01b600052603260045260246000fd5b60005b83811015611490578181015183820152602001611478565b8381111561149f576000848401525b50505050565b600081518084526114bd816020860160208601611475565b601f01601f19169290920160200192915050565b84815283602082015260ff83166040820152608060608201526000610c8860808301846114a5565b634e487b7160e01b600052601160045260246000fd5b60006001600160a01b03828116848216808303821115611531576115316114f9565b01949350505050565b6001600160a01b03851681526080602080830182905260009161155f908401876114a5565b85604085015283810360608501528085518083528383019150838160051b84010184880160005b838110156115b457601f198684030185526115a28383516114a5565b94870194925090860190600101611586565b50909b9a5050505050505050505050565b6000602082840312156115d757600080fd5b5051919050565b81835260006001600160fb1b038311156115f757600080fd5b8260051b8083602087013760009401602001938452509192915050565b8581528460208201526080604082015260018060a01b03845116608082015260006020850151604060a084015261164e60c08401826114a5565b905082810360608401526116638185876115de565b98975050505050505050565b60006020828403121561168157600080fd5b8151801515811461145857600080fd5b85815284602082015260018060a01b038451166040820152602084015160608201526040840151608082015260c060a082015260006116d460c0830184866115de565b979650505050505050565b6000826116fc57634e487b7160e01b600052601260045260246000fd5b500490565b60008251611713818460208701611475565b9190910192915050565b60008282101561172f5761172f6114f9565b500390565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a0608082018190526000906116d4908301846114a5565b60608152600061178260608301866114a5565b828103602084015261179481866114a5565b90508281036040840152610c8881856114a556fe8e94fed44239eb2314ab7a406345e6c5a8f0ccedf3b600de3d004e672c33abf4a2646970667358221220a22085e31669daee6c1c78eddf315e7bbf28bd0d05aa0f4bf03c7229c95929b164736f6c63430008090033";

    public static final String FUNC_CLAIMFAILEDDEPOSIT = "claimFailedDeposit";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_FINALIZEWITHDRAWAL = "finalizeWithdrawal";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISWITHDRAWALFINALIZED = "isWithdrawalFinalized";

    public static final String FUNC_L2BRIDGE = "l2Bridge";

    public static final String FUNC_L2PROXYTOKENBYTECODEHASH = "l2ProxyTokenBytecodeHash";

    public static final String FUNC_L2TOKENADDRESS = "l2TokenAddress";

    public static final String FUNC_L2TOKENFACTORY = "l2TokenFactory";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected L1ERC20Bridge(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected L1ERC20Bridge(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected L1ERC20Bridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected L1ERC20Bridge(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> claimFailedDeposit(String _depositSender, String _l1Token, byte[] _l2TxHash, BigInteger _l2BlockNumber, BigInteger _l2MessageIndex, List<byte[]> _merkleProof) {
        final Function function = new Function(
                FUNC_CLAIMFAILEDDEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_depositSender), 
                new org.web3j.abi.datatypes.Address(_l1Token), 
                new org.web3j.abi.datatypes.generated.Bytes32(_l2TxHash), 
                new org.web3j.abi.datatypes.generated.Uint256(_l2BlockNumber), 
                new org.web3j.abi.datatypes.generated.Uint256(_l2MessageIndex), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_merkleProof, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _l2Receiver, String _l1Token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_l2Receiver), 
                new org.web3j.abi.datatypes.Address(_l1Token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finalizeWithdrawal(BigInteger _l2BlockNumber, BigInteger _l2MessageIndex, byte[] _message, List<byte[]> _merkleProof) {
        final Function function = new Function(
                FUNC_FINALIZEWITHDRAWAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_l2BlockNumber), 
                new org.web3j.abi.datatypes.generated.Uint256(_l2MessageIndex), 
                new org.web3j.abi.datatypes.DynamicBytes(_message), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_merkleProof, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(List<byte[]> _factoryDeps, String _l2TokenFactory) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(_factoryDeps, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.Address(_l2TokenFactory)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isWithdrawalFinalized(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_ISWITHDRAWALFINALIZED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> l2Bridge() {
        final Function function = new Function(FUNC_L2BRIDGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> l2ProxyTokenBytecodeHash() {
        final Function function = new Function(FUNC_L2PROXYTOKENBYTECODEHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> l2TokenAddress(String _l1Token) {
        final Function function = new Function(FUNC_L2TOKENADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_l1Token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> l2TokenFactory() {
        final Function function = new Function(FUNC_L2TOKENFACTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static L1ERC20Bridge load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new L1ERC20Bridge(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static L1ERC20Bridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new L1ERC20Bridge(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static L1ERC20Bridge load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new L1ERC20Bridge(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static L1ERC20Bridge load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new L1ERC20Bridge(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<L1ERC20Bridge> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _mailbox) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_mailbox)));
        return deployRemoteCall(L1ERC20Bridge.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<L1ERC20Bridge> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _mailbox) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_mailbox)));
        return deployRemoteCall(L1ERC20Bridge.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<L1ERC20Bridge> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _mailbox) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_mailbox)));
        return deployRemoteCall(L1ERC20Bridge.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<L1ERC20Bridge> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _mailbox) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_mailbox)));
        return deployRemoteCall(L1ERC20Bridge.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
